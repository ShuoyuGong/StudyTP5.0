******************第一节*TP5.0安装******************
1.TP5.0框架
    1.1 TP5.0框架开发
    2.1 TP5.0核心技术
    3.1 TP5.0 项目开发
2.PHP框架
    (1)TP3.2
    (2)laravel
    (3)Yii框架
    (4)TP5.0框架
3.TP 5.0
    开源、快速、简单的面向对象的轻量级PHP开发框架
4.检测TP 5.0的环境
    (1).PHP >= 5.4.0
    (2).PDO PHP Extension
    (3).MBstring PHP Extension
    (4).CURL PHP Extension
5.安装
    (1).源代码包安装
        a.去thinkphp官网下载TP5.0核心文件
        b.解压压缩包
        c.将解压文件拷贝到WWW目录
        d.通过PHP study访问 TP文件 public文件夹
    (2).composer安装
        a.composer安装官网(www.phpcomposer.com)
            是用来管理PHP依赖关系的工具
        b.下载composer
        c.安装composer 安装至PHP工具中
        d.检测composer安装是否安装成功
            (1).进入命令行
            (2).输入composer
        e.安装TP5
            (1).切换至PHP study根目录(WWW)
            (2).切换国内镜像(国外镜像安装速度慢)
                composer config -g repo.packagist composer http://packagist.phpcomposer.com
            (3).安装TP 5.0
                composer create-project topthink/think [文件夹名称->]tp5  --prefer-dist
            (4).检测TP 5.0安装是否安装成功
                a.通过PHP study访问 TP文件 public文件夹
    (3).git安装TP 5.0
        a.CMD切换至PHP study根目录(WWW)
        b.输入 git clone https://github.com/top-think/think [文件夹名称->]tp5
        c.切换至 TP5.0 目录下
        d.拷贝核心框架代码
            git clone https://github.com/top-think/framework thinkphp
        e.检测TP 5.0安装是否安装成功
            (1).通过PHP study访问 TP文件 public文件夹



******************第二节*目录结构和MVC模式******************
1.目录结构
    |-appliccation  应用目录，是整个网站的核心
    |---|---index 前台目录
    |---|---|---controller 控制器
    |---|---|---model 数据模型
    |---|---|---view 页面
    |---|---admin 后台目录
    |-extend 扩展类库目录
    |-public 静态资源和入口文件
    |---|---static 用于存放静态资源 css、js、img
    |---|---index.php 入口文件
    |-runtime 网站运行临时目录
    |-tests 测试目录
    |-thinkphp TP框架的核心文件
    |---|---lang 语言包
    |---|---library TP框架的核心文件
    |---|---tpl 模版页面
    |-vendor 第三方扩展目录
2.URL地址了解
    http://www.tp.com/index.php/index/index/index
    http://www.tp.com/   index.php  /index   /index  /index
            域名           入口文件   前台     控制器   方法
3.了解TP开发模式
    (1).链接数据库(F:\PHPstudy\PHPTutorial\WWW\TP5\application\database.php)
        // 数据库类型
        'type'            => 'mysql',
        // 服务器地址
        'hostname'        => '127.0.0.1',
        // 数据库名
        'database'        => '',
        // 用户名
        'username'        => 'root',
        // 密码
    (2).开启调试模式(F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application\config.php)
        app_debug   -> ture;显示报错信息
    (3).控制器中书写代码(F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application\index\controller\index.php)
        <?php
            namespace app\index\controller;
            // 引入系统数据类
            use think\Db;
            // 引入系统控制器类
            use think\Controller;
            class Index extends Controller
            {
                public function index()
                {
                    // return '<style type="text/css">*{ padding: 0; margin: 0; } .think_default_text{ padding: 4px 48px;} a{color:#2E5CD5;cursor: pointer;text-decoration: none} a:hover{text-decoration:underline; } body{ background: #fff; font-family: "Century Gothic","Microsoft yahei"; color: #333;font-size:18px} h1{ font-size: 100px; font-weight: normal; margin-bottom: 12px; } p{ line-height: 1.6em; font-size: 42px }</style><div style="padding: 24px 48px;"> <h1>:)</h1><p> ThinkPHP V5<br/><span style="font-size:30px">十年磨一剑 - 为API开发设计的高性能框架</span></p><span style="font-size:22px;">[ V5.0 版本由 <a href="http://www.qiniu.com" target="qiniu">七牛云</a> 独家赞助发布 ]</span></div><script type="text/javascript" src="https://tajs.qq.com/stats?sId=9347272" charset="UTF-8"></script><script type="text/javascript" src="https://e.topthink.com/Public/static/client.js"></script><think id="ad_bd568ce7058a1091"></think>';
                    // 从数据库中读取数据
                    $data = Db::table('coding_region')->select();
                    // 分配数据给页面
                    $this->assign('data',$data);
                    return view();
                }
            }
    (4).页面中(F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application\index\view\index\index.html)

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="X-UA-Compatible" content="ie=edge">
            <title>Document</title>
        </head>
        <body>
            <table border="1" width="800px" align="center">
                <tr>
                    <th>ID</th>
                    <th>parentid</th>
                    <th>name</th>
                    <th>parentpath</th>
                    <th>firstletter</th>
                    <th>type</th>
                    <th>create</th>
                </tr>

                {volist name="data" id="value"}
                    <tr>
                        <td>{$value.id}</td>
                        <td>{$value.parentid}</td>
                        <td>{$value.name}</td>
                        <td>{$value.parentpath}</td>
                        <td>{$value.firstletter}</td>
                        <td>{$value.type}</td>
                        <td>{$value.created}</td>
                    </tr>
                {/volist}
            </table>
        </body>
        </html>
4.MVC模式
    M model 模型
    V view  试图
    C controller 控制器
5.MVC在TP中如何体现？
    (1).M (F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application\index\model)
        执行数据库相关处理
    (2).V (F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application\index\view)
        展示页面
    (3).C (F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application\index\controller)
        主要负责整个逻辑运转，核心
6.MVC的变形模式
    (1).MV模式(模型和控制器)
        主要作用：用于接口开发(只需要返回JSON或XML数据，不需要页面展示，舍弃C层)
    (2).VC(试图和控制器)
        主要作用：单页面得网站(不需要从数据库中获取数据，舍弃M层)

******************第三节*架构详解和跨控制器调用******************
1.TP架构的概述
    TP使用了MVC模式，它强制的是应用程序的输入、处理和输出分开。使用MVC应用编程被分为
    三个核心部件：模型(M)、视图(V)、控制器(C)，它们各自处理自己的任务
2.URL解析
    http://www.tp.com/   index.php  /index   /index  /index
            域名           入口文件   前台     控制器   方法
3.入口文件
    (1).文件地址:(F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\public\index.php)
    (2).作用：负责处理整个TP的请求
4.应用
    (1).应用地址(F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application)
    (2).作用：一个应用代表一个网站
5.模块(以前台为例)
    (1).模块地址(F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application\index)
    (2).作用：网站前台所有的相关内容都与其有关
    (3).新建后台模块
        a.在应用目录新建admin目录
        b.在admin目录下新建model、view、controller
        c.在控制器中新建Index控制器
6.控制器
    (1).控制器目录(F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application\index\controller)
    (2).作用：书写业务逻辑
    (3).新建控制器
        a.在前台控制器目录新建user.php
        b.在控制器中书写代码
        c.地址栏访问
        d.注意：
            1.控制器的文件名必须首字母大写
            2.控制器中必须声明命名空间
            3.控制器中类名必须和文件名一致
7.操作(方法)
    1.操作地址
        操作一般都在控制器的文件中
    2.新建一个操作(以前台Index控制器为例)
        a.打开前台index控制器
        b.在控制器中新建test方法
        c.通过地址栏访问
8.模型(数据模型)
    1.作用
        负责数据库相关的处理
9.视图(页面)
    1.其实就是网站的页面
10.命名空间
    1.与目录有关(以前台index为例)
        namespace app\index\controller
11.跨控制器调用
    public function diaoyong()
    {
        echo "调用前台user控制器 第一种方式 使用命名空间";
        echo "<br>";
        $model = new \app\index\controller\User;
        echo $model->index();
        echo "<hr>";

        echo "调用前台user控制器 第二种方式 use方法";
        echo "<br>";
        $model = new User();
        echo $model->index();
        echo "<hr>";

        echo "调用前台user控制器 第三种方式 使用系统方法";
        echo "<br>";
        $model = controller('User');
        echo $model->index();
        echo "<hr>";



        echo "调用后台admin index控制器 第一种方式 使用命名空间";
        echo "<br>";
        $model = new \app\admin\controller\Index;
        echo $model->index();
        echo "<hr>";

        echo "调用后台admin index控制器 第二种方式 use方法";
        // use app\admin\controller\index as adminIndex;
        echo "<br>";
        $model = new adminIndex;
        echo $model->index();
        echo "<hr>";

        echo "调用后台admin index控制器 第三种方式 使用系统方法";
        //系统方法一般在(F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\thinkphp\helper.php)
        echo "<br>";
        $model = controller('admin/Index');
        echo $model->index();
        echo "<hr>";
    }

******************第四节*方法调用和框架加载流程*************
1.调用方法
    a.调用当前控制器的test方法
        public function fangfa(){
            // 调用当前控制器中的test方法
            // $this代表当前控制器
            echo "使用this方法<br>";
            echo $this->test();
            echo "<hr>";
            // self代表当前控制器
            echo "使用self方法"."<br>";
            echo self::test();

            echo "<hr>";
            // 直接使用当前控制器名字找到方法名
            echo "使用Index控制器"."<br>";
            echo Index::test();

            echo "<hr>";
            // 直接使用当前控制器名字找到方法名
            echo "使用系统方法 action"."<br>";
            echo action('test');
        }
    b.调用其他控制器中的方法(User控制器下的index方法)
        public function othersfangfa()
        {
            // 传统方法
            echo "传统方法";
            echo "<br>";
            $model = new \app\index\controller\User;
            echo $model->index();
            echo "<hr>";
            // 系统方法
            echo "系统方法";
            echo "<br>";
            echo action('User/index');
            echo "<hr>";
        }
    c.调用后台模块下的Index方法
        public function houtaimokuai()
        {
            // 传统方法
            echo "传统方法";
            echo "<br>";
            $model = new \app\admin\controller\Index;
            echo $model->index();
            echo "<hr>";
            // 系统方法
            echo "系统方法";
            echo "<br>";
            echo action('admin/Index/index');

        }
2.主要分析TP的执行流程
    a.入口文件(public\index.php)
        作用: 1.定义目录常量
              2.加载框架的引导目录
    b.加载框架的引导目录(thinkphp\start.php)
        作用：1.引导基础文件base.php
              2.对应用进行运转
    c.引导加载框架基础文件base.php(thinkphp\base.php)
        作用： 1.加载了系统常量
               2.引入loader类(library\think\loader.php)
               3.引入环境变量
               4.注册自动加载机制
               5.注册异常处理机制(library\think\error.php)
               6.加载惯例配置文件(thinkphp\convention.php)
    d.运行应用(library\think\App.php)下的run方法
        第一步：加载当前控制器中的initCommon方法
        第二步：加载当前控制器中init()方法调用和框架加载流程
            1.加载各种配置文件
            2.加载公共文件
            3.加载语言包
        第三步：设置时区
        第四步：加载当前控制器routeCheck()方法，进行路由检测
        第五步：调用控制器中exec()方法调用和框架加载流程
            根据用户请求进行分发处理
        第六步：根据不同的请求类型记载对应的文件(module()方法)
            加载到对应的控制器和方法名
    e.响应输出
        用户看到的所有界面就加载完毕

******************第五节*配置相关(上\下)***********************
1.配置文件的格式(以数组为主)
    a.TP支持多种配置格式的配置格式，但最终都是解析为PHP数组的方式
    b.我们主要的学习形式就是数组
    c.  return[
            default_module => 'index',
            default_controller => 'Index',
            default_action => 'index',
        ];
2.配置文件的形式
    a.惯例配置(路径：thinkphp\convention.php)
        1.注意：一般不要修改惯例配置
        2.读取配置文件内容
            a.直接通过键获取值
                1.通过系统类
                    echo \think\Config::get('name');
                2.通过系统方法
                    // 输出配置文件  config()方法 用于读取系统方法
                    echo config('name');
                    echo "<hr>";
                    echo config('age');
                    echo "<hr>";
                    echo config('address');
                    echo "<hr>";
                3.使用use将Config引入
                    use  \think\Config;
                    // 通过系统类进行配置
                    // 如果配置项存在直接输出，不存在返回NULL
                    echo Config::get('name');
                    echo "<hr>";
                    echo Config::get('age');
                    echo "<hr>";
                    echo Config::get('address');
                    echo "<hr>";
            b.获取整个键值对数组
                1.通过系统类
                    a.直接打印配置信息
                        echo \think\Config::get('teacher');
                        echo \think\Config::get('teacher.name');
                    b.打印数组配置信息
                        dump \think\Config::get('teacher');
                        dump \think\Config::get('teacher.name');
                2.通过系统方法
                    a.直接打印配置信息
                        // 输出配置文件  config()方法 用于读取系统方法
                        echo config('teacher');
                        echo "<hr>";
                        echo config('teacher.name');
                        echo "<hr>";
                        echo config('teacher.age');
                        echo "<hr>";
                        echo config('teacher.address');
                    b.打印数组配置信息
                        // 输出配置文件  config()方法 用于读取系统方法
                        dump config('teacher');
                        echo "<hr>";
                        dump config('teacher.name');
                        echo "<hr>";
                        dump config('teacher.age');
                        echo "<hr>";
                        dump config('teacher.address');
                3.使用use将Config引入
                    a.直接打印配置信息
                        use  \think\Config;
                        // 通过系统类进行配置
                        // 如果配置项存在直接输出，不存在返回NULL
                        echo Config::get('name');
                        echo "<hr>";
                        echo Config::get('age');
                        echo "<hr>";
                        echo Config::get('address');
                        echo "<hr>";
                    b.打印数组配置信息
                        use  \think\Config;
                        // 通过系统类进行配置
                        // 如果配置项存在直接输出，不存在返回NULL
                        dump Config::get('name');
                        echo "<hr>";
                        dump Config::get('age');
                        echo "<hr>";
                        dump Config::get('address');
                        echo "<hr>";
    b.应用配置(路径：application\config.php)
    c.扩展配置
        1.其实就是对配置文件进行分目录的管理
        2.默认有两个扩展配置
            a.  database.php(application\database.php)
            b.  (application\extra\用户可以自定义配置文件)
            c.  
                EX:dump(config('扩展文件名.键'))
                读取database扩展配置
                读取database所有配置项
                dump(config('database'))
                读取database单个配置项
                dump(config('database.hostname'))
            d.自定义扩展配置
                1.在扩展目录下(application\extra)下新建user.php
                2.打开文件书写相关配置
                    <?php
                    return [
                        'name' => '张三',
                        'love' => '作家',
                    ]
                3.读取自定义扩展配置
    d.场景配置
        1.解决问题
            开发过程中可能在不同的环境下进行开发，例如在公司和在家里使用两个数据库一样
            则需要两个配置文件->home.php/->office.php
        2.如何使用
            a.修改应用配置(application\config.php)
            'app_status' => 'home';
            b.在应用目录下新建对应的文件名(home.php)
            c.在home.php中书写相关配置
    e.模块配置
        1.解决问题
            每一个模块都有自己特有的配置，前台模块有前台模块的配置，后台模块有后台模块的配置
        2.如何使用(以前台模块为例)
            a.在前台模块下(application\index\)新建config.php
            b.打开配置文件书写
    f.动态配置
        1.如何配置
            a.系统方法
                echo '通过系统方法进行配置';
                echo "<br>";
                dump(config('name','PHP开发'));
                echo "<br>";
            b.系统类
                echo '通过系统类进行配置';
                echo "<br>";
                dump(\think\Config::set('name','WEB前端'));
                echo "<br>";
                use think\Config;
                dump(Config::set('name','WEB前端'));
3.系统类(属于TP框架的核心类库)
    a.目录 -> \thinkphp\library\think
    b.Config设置和获取配置文件信息
4.系统方法(属于TP框架的方法库)
    a.目录 -> thinkphp\helper.php
    b.  Controller  实例化控制器
        action      调用模块的操作方法
        config      设置和获取配置
        dump        浏览器友好的数组/变量输出
5.配置文件之间的加载顺序
    a.优先级
        动态配置->模块配置->场景配置->应用配置->应用配置->惯例配置
    b.加载顺序
        惯例配置->应用配置->应用配置->场景配置->模块配置->动态配置
    c.配置文件实现原理
        后面加载的配置，把前面加载的同名配置名覆盖，所以最后加载的配置项优先级最高
6.环境变量配置
    a.TP 5.0支持环境变量的配置
    b.如何设置环境变量配置
        1.打开网站根目录(\StudyTP5.0\)下新建文件名为(.env)的文件
        2.书写环境配置
            a.书写时不能使用中文
        3.读取环境配置
            a.命名空间全路径
                dump(\think\Env::get('name'));
                dump(\think\Env::get('name','不存在'));
            b.使用use引入Env.php文件,导入系统类
                // use  \think\Env;
                dump(env::get('name'));
            c.注意：只能读取数组单个元素，不能读取整个数组
        4.如何使用
            a.在Env.php文件中写入配置文件中想要修改的键值对
                例如：'app_debug' => 'ture'
            b.打开配置文件，引入Use think\Env
            c.随后使用系统类赋值键值对
                例如：'app_debug' => Env::get('app_debug',false),

******************第七节*入口文件和配置模式*********************
1.路由作用
    a.简化url地址，方便大家记忆
    b.有利于搜索引擎的优化
2.入口文件
    a.前后台分离
        1.在网站public目录下新建一个admin.php后台入口文件
        2.打开admin.php书写代码
    b.绑定模块
        1.实现功能
            index.php入口文件只能去前台模块页面
            admin.php入口文件只能去后台模块页面
        2.如何实现
            a.在前台入口文件中写入，绑定前台模块
                define('BIND_MODULE','index');
            a.在后台入口文件中写入，绑定后台模块
                define('BIND_MODULE','admin');
        3.URL地址发生改变
            a.入口绑定之前url地址
                www.tp.com/入口文件/模块名/控制器/方法名
                www.tp.com/Admin.php/Admin/index/index
            b.入口绑定之后url地址
                www.tp.com/入口文件/控制器/方法名
                www.tp.com/Admin.php/index/index
        4.隐藏入口文件
            a.开启apace的重写(F:\PHPstudy\PHPTutorial\Apache\conf\httpd.conf)
                把注释开启->LoadModule rewrite_module modules/mod_rewrite.so
            b.设置访问权限
            c.入口文件，在网站public目录下
                1.新建文件.htaccess文件
                2.写入
                    <IfModule mod_rewrite.c>
                        Options +FollowSymlinks -Multiviews
                        RewriteEngine On

                        RewriteCond %{REQUEST_FILENAME} !-d
                        RewriteCond %{REQUEST_FILENAME} !-f
                        RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]
                    </IfModule>
            d.重启服务
            f.url地址变化，已不需要写入口文件
        5.TP5.0路由学习
            a.支持3种方式的URL解析规则
                1.普通模式
                    a.定义：关闭路由，完全使用默认的PATH_INFO方式URL
                    b.形式：http://www.tp.com:81/index.php/index/index/diaoyong
                    c.如何配置
                        // 是否开启路由
                        'url_route_on'           => true,
                        // 是否强制使用路由
                        'url_route_must'         => false,
                2.混合模式
                    a.定义：开启路由，并使用路由定义+默认的PATH_INFO方式混合
                    b.如何配置
                        // 是否开启路由
                        'url_route_on'           => true,
                        // 是否强制使用路由
                        'url_route_must'         => false,
                3.强制模式
                    a.定义：开启路由，并设置必须定义路由才能访问
                    b.如何配置
                        // 是否开启路由
                        'url_route_on'           => true,
                        // 是否强制使用路由
                        'url_route_must'         => true,
            b.路由只针对应用，不针对模块，因此路由的设置也是针对应用下面的所有模块
            c.关闭后台路由
                在后台写入以下代码，必须写在 加载框架引导文件  之后
                // 关闭admin模块的路由
                \think\App::route(false);
        6.设置路由-动态单个注册
            a.设置路由请求类型
                1.get  支持get请求(两种方式)
                    Route::rule('type','index/index/type','get');
                    Route::get('type','index/index/type');
                2.post 支持post请求(两种方式)
                    Route::rule('type','index/index/type','post');
                    Route::post('type','index/index/type');
                3.同时支持get和post方式
                    Route::rule('type','index/index/type','get|post');
                4.支持所有请求方式
                    Route::rule('type','index/index/type','*');
                    Route::any('type','index/index/type','*');
                4.put
                    Route::rule('type','index/index/type','put');
                    Route::put('type','Index/index/type');
                5.delete
                    Route::rule('type','index/index/type','delete');
                    Route::delete('type','Index/index/type');
                6.Route::rule()默认支持所有请求方式
            b.设置路由的文件
            c.如何设置
                //1.静态地址路由
                // // 引入系统类
                // //设置路由之后，就不能用pathinfo访问
                // use think\Route;
                // Route::rule('/','index/index/index');
                // Route::rule('test','index.php/index/index/test');
            d.路由的形式
                1.静态地址路由
                    // Route::rule('test','index.php/index/index/test');
                2.注册带参数路由
                    // Route::rule('test/:id','index.php/index/index/test');
                    如果路由设置两个参数，必须设置两个参数的路由
                    // Route::rule('test/:id/:name','index.php/index/index/test');
                3.可选参数的路由
                    // Route::rule('test/:id/[:name]','index.php/index/index/test');
                4.全动态路由
                    // Route::rule(':id/[:name]','index.php/index/index/test');
                5.完全匹配路由
                    // Route::rule('test$/::id/[:name]','index.php/index/index/test');
                    如果写成http://www.tp.com:81/test1  可以成功访问
                    如果写成http://www.tp.com:81/test1/waf/gds,如果test1后面写一些东西，则不能访问
                6.路由额外带参数
                    // Route::rule('test','index/index/test?id=10&name=gsy');
                    // Route::rule('test$/::id/[:name]','index.php/index/index/test?id=10&name=gsy');
        7.设置路由-动态批量注册
            a.基本格式
                Route::rule([
                '路由规则1'=>'路由地址和参数',
                '路由规则2'=>['路由地址和参数','匹配参数（数组）','变量规则（数组）']
                ...
                ],'','请求类型','匹配参数（数组）','变量规则');
            b.使用方式
                1.所有请求类型
                    Route::rule([
                                "test" => "index/index/test",
                                "course/:id" => "index/index/course",
                            ]);
                2.get请求类型
                    Route::get([
                                "test" => "index/index/test",
                                "course/:id" => "index/index/course",
                            ]);
                3.post请求类型
                    Route::post([
                                "test" => "index/index/test",
                                "course/:id" => "index/index/course",
                            ]); 
            c.设置路由-使用配置文件进行批量注册
                return [
                        "test" => "index/index/test",
                        "course/:id" => "index/index/course",
                    ];
        8.变量规则
            设置变量必须是1-3位的数字
            Route::rule("course/:id","index/index/course",'get',[],['id'=>'\d{1,3}']);
        9.路由参数
            路由参数method，请求方式必须是get
            路由参数ext，主要设置路由的后缀
            Route::rule("course/:id","index/index/course",'get',['method'=>'get','ext'=>'html'],['id'=>'\d{1,3}']);
        10.资源路由
            a.后台功能
                增加页面、展示页面、删除功能、修改页面、修改功能、增加功能
            b.声明
                Route::resource('blog','index/blog');
            c.会自动注册7个路由规则
                1.get     blog            index     后台展示
                2.get     blog/create     create    添加页面
                3.post    blog            save      增加操作
                4.get     blog/:id        read      读取操作
                5.get     blog/:id/edit   edit      修改页面
                6.put     blog/:id        update    更新操作
                7.delete  blog/:id        delete    删除操作
        11.设置快捷路由
            a.声明快捷路由
                Route::controller('blog','index/blog');
            b.控制器中
                class Blog{
                    public function index()
                    {
                        echo "我是Blog控制器中的index方法";
                    }
                    public function geta()
                    {
                        echo "aaaaaaaaaaaaaaaaaaaaaaaaaaaa";
                    }
                }
            c.URL访问
                http://www.tp.com/blog/a
        12.生成URL地址
            a.系统类
                dump(Url::build('index/index/index'));
            b.系统方法
                dump(url('index/index/index'));
            c.使用
                1.普通使用
                    dump(Url::build('index/index/index'));
                    dump(url('index/index/index'));
                2.带参数
                    dump(url('index/index/index/id/10'));
                    dump(url('index/index/index',['id'=>5,'name'=>'gsy']));
                    dump(url('index/index/index','id=10&name=gsy'));
                3.带锚点
                    dump(url('index/index/index#name'));
                4.带域名
                    dump(url('index/index/index@blog'));
                5.加上入口文件
                    Url::root('/index.php');
                    dump(url('index/index/index@blog'));

******************第十节*控制器初始化***************************
1.注意： 
    a.控制器文件名必须首字母大写，采用驼峰命名
    b.控制器名必须跟文件名保持一致
    c.命名空间必须和文件名对应
    d.如果控制器名字采用驼峰命名->User_Info,必须加上下划线
2.加载页面
    a.系统View类
        1.
            // 实例化系统view类
            $view = new \think\View;
            return $view->fetch(); 
        2.
            use \think\View;
            $view=new View();
            return $view->fetch();  
    b.系统Controller方法
        继承系统Controller类
        class User extends Controller{
            public function load(){
                return $this->fetch();
            }
        }
    c.系统函数
        return view()
3.系统类
    Config
    Env
    Controller
    Route
    Url
4.系统方法
    config()
    view()
    controller()
    action()
    url()
    dump()
    input()
5.数据的输出
    a.在应用配置文件中可以设置数据返回格式
        'default_return_type' => 'html' 默认是html格式的数据
    b.ajax请求的时候，如何返回数据
        'default_ajax_return' => 'json' 默认是json格式的数据
6.控制器的初始化
    a.必须继承系统controller控制器
    b.只要调用控制器下的任意方法，都会先找初始化方法
    c.控制器初始化方法的使用
        1.提取用来提取控制器下公共的代码
        2.后台权限把控
    d.
    public function _initialize(){
        echo "控制器初始化";
    }
7.前置操作
    a.把一些公共的设置提取成方法进行调用
    b.前置方法必须结合系统Controller控制器
    c.核心设置
         protected $beforeActionList = [
            'one',
            // 除去index1方法都可以使用two这个方法
            'two'=>['except'=>'index'],
            // 只让index1使用there这个方法
            'three'=>['only'=>'index1'],
        ];

******************第十一节*页面跳转*****************************
1.跳转方式
    a.页面跳转基于系统Controller类，所以控制器必须继承Controller类
    b.成功跳转
        $this->success('跳转成功',url('index/index'));
    c.失败跳转
        $this->error('登陆失败');
2.修改成功失败的模板页面
    a.找到默认模版页面
        // 默认跳转页面对应的模板文件
        'dispatch_success_tmpl'  => THINK_PATH . 'tpl' . DS . 'dispatch_jump.tpl',
        'dispatch_error_tmpl'    => THINK_PATH . 'tpl' . DS . 'dispatch_jump.tpl',
    b.文件目录
        E:\WAMP\www\StudyTP5.0\thinkphp\tpl\dispatch_jump.tpl
    c.跳转方法给模板页面的数据
        1.$code     返回的状态码    成功为1，失败为0
        2.$msg      页面的提示信息 
        3.$wait     等待时间
        4.$url      指定跳转页面，默认返回上级页面
        $data       用户自定义返回的数据
    d.在成功失败的模板页面进行修改
    e.用户自定义模板目录
        1.修改配置文件
            // 默认跳转页面对应的模板文件
            'dispatch_success_tmpl'  => THINK_PATH . 'tpl' . DS . 'success.tpl',
            'dispatch_error_tmpl'    => THINK_PATH . 'tpl' . DS . 'error.tpl',
        2.在系统模版目录下新建success.tpl和error.tpl文件
        3.自定义书写跳转页面

******************第十二节*重定向和空控制器空操作*****************************
1.作用
    重定向(Redirect)就是通过各种方法将各种网络请求重新定个方向转到其他位置
2.使用
    redirect('跳转地址','其他参数',code,'隐式参数');
    redirect('index/index',['id'=>10,'name'=>'gsy'],302,'');
3.空控制器空操作
    a.空操作
        主要解决一些用户恶意的地址栏输入，报错影响交互
        public function _empty(){
            $this->redirect('index/index');
        }
    b.空控制器
        1.声明空控制器
            <?php
            namespace app\index\controller;

            use \think\Controller;

            class Error extends Controller{
                    public function index(){
                        $this->redirect('index/index');
                    }
                public function _empty(){
                    $this->redirect('index/index');
                }
            }
        2.注意:
            a.网站上线的时候每一个控制器都要有空操作
            b.不论前台后台都需要写一个空控制器
    c.使用命令行
        1.切换到网站根目录下
        2.输入 php think
        3.使用
            a.创建控制器
                php think make:controller app\index\controller\Fools
            b.创建数据模型
                php think make:model app\index\model\Goods
            c.清空临时文件
                php think clear
    d.资源控制器
        1.使用命令行创建控制器
            php think make:controller app\index\controller\Goods
        2.资源控制器一般配合资源路由的使用

******************第十三节*获取请求类和URL基本信息*****************************
1.系统类
    a.Config
    b.Controller
    c.Env
    d.Route
    e.Url
    f.View
    e.Request
2.系统方法
    a.controller();调用控制器
    b.dump();格式化输出
    c.config();读取和设置配置文件
    d.action();调用方法
    e.url();生成url地址
    f.view();加载页面
    g.request();实例化请求类
3.如何获取请求类
    a.系统函数
        $request=request();
        print_r($request);
    b.TP Request类
        1.use think\Request;
          因为Request属于单例模式，所以不能直接new实例化
          $request=Request::instance();
        2.use think\Request;
          use think\Controller;
          方法的书写
          class Index extends Controller{
              public function request(Request $request){
                  dump($request);
              }
          }
    c.获取请求信息
        1.// 获取域名
        dump($request->domain());
        2.// 获取url地址
        dump($request->url());
        3.// 获取入口文件
        dump($request->baseFile());
        4.// 获取pathinfo路径
        dump($request->pathInfo());
        5.// 获取不带后缀的path
        dump($request->path());
        6.// 只获取Url伪静态后缀
        dump($request->ext());
        7.伪静态
            就是将路径伪装成静态页面，让搜索引擎更好收录网站，防止用户知道网站的真实开发语言
    d.获取请求模块\控制器\方法
        // 当前模块信息
        dump($request->module());
        // 当前控制器
        dump($request->controller());
        // 当前方法名
        dump($request->action()); 
    e.获取请求相关类型
        1.请求类型
            dump($request->method());
        2.请求资源类型
            dump($request->type());
        3.访问地址
            dump($request->ip());
        4.是否ajax请求
            dump($request->isajax());
        5.获取请求参数
            dump($request->param());
        6.获取特定字段参数
            dump($request->only(['name']));
        7.剔除某些字段
            dump($request->except(['name']));
******************第十四节*输入变量********************************************
1.获取变量
    a.-判断get请求类型的中的id是否存在
        dump($request->has('id','get'));
        dump(input('?get.id'));
    b.读取变量
        dump($request->get('id'));
        dump(input('get.id'));
    c.读取所有变量
        dump($request->get());
        dump(input('get.'));
    d.可以读取的数据类型
        get/post/delete/put/session/cookie/server等
    e.变量过滤
        1.作用
            防止恶意输入，防止sql注入
        2.使用
            a.转实体，单个方法过滤
                $request->filter("htmlspecialchars");
            b.多种方法过滤
                $request->filter(["htmlspecialchars","strip_tags"]);
            c.针对post参数过滤,转实体+md5加密
                dump($request->post('text','','htmlspecialchars,md5'));
    e.变量的获取和排除
        1.获取变量'user'
            dump($request->only('user'));
        2.排除变量'user'
            dump($request->except('user'));
        3.排除post类型下的变量'user'
            dump($request->except('user','post'));
    f.变量的修饰符
        1.修饰变量的类型
            s   强制转换为字符串类型
            d   强制转换为整型类型
            b   强制转换为布尔类型
            a   强制转换为数组类型
            f   强制转换为浮点类型
        2.使用
            input('get.id/d');强制转换为整型类型
            input('post.name/s');强制转换为字符串类型
    g.更改变量
        dump($request->get(['id'=>20]));
    h.判断请求类型
        1.dump($request->isGet());
        2.dump($request()->isGet());
******************第十五节*模拟请求及参数绑定************************************
1.模拟put、delete请求
    a.使用
        <form action="{:url('iftype')}" method="post">
            <p>User:
                <input type="text" name="user">
                ****<input type="hidden" name="_method" value="DELETE">***
            </p>
            <p>Pass
                <input type="password" name="pwd">
            </p>
            <p>
                <input type="submit" value="提交">
            </p>
        </form>
    b.注意：
        1.表单的请求类型必须是post
        2.需要设置隐藏域传递模拟请求类型
2.模拟ajax和pjax请求
    a.ajax
        http://www.tp.com/index/iftype.html?_ajax=1
    b.pjax
        http://www.tp.com/index/iftype.html?_pjax=1
3.伪静态
    a.作用
        1.URL伪静态通常是为了满足更好的SEO效果
        2.为了网站的安全
    b.修改伪静态
        在配置文件中进行修改
            // URL伪静态后缀
            'url_html_suffix'        => 'html',
4.参数绑定
    a.使用
        public function bangding($id,$name="admin"){
            dump($id);
            dump($name);
        }
    b.http://www.tp.com/index/bangding/id/1/name/gsy
    c.注意：
        1.参数绑定的个数少于地址栏参数的个数
        2.参数绑定的名字必须和地址栏一一对应
        3.可以设置默认值

******************第十六节*数据库的链接方式*******************************
1.TP支持的数据库类型
    Mysql、SqlServer、PgSQl、Sqlite
2.如何连接数据库
    a.配置文件定义
        1.database.php
        2.如何使用
             a.tp方法
                public function dataSql(){
                    // 实例化系统数据库类
                    $db = new Db;
                    // 查询数据
                    $data = $db::table("user_info")->select();
                    dump($data);
                }
            b.使用sql语句
                $data = $db::query("select * from user_info");
    b.方法配置
        1.使用数组
            public function actionSql(){
                echo "使用方法配置数据库连接";
                // 使用数组
                $db = Db::connect([
                    // 数据库类型
                'type'            => 'mysql',
                // 服务器地址
                'hostname'        => '127.0.0.1',
                // 数据库名
                'database'        => 'user',
                // 用户名
                'username'        => 'root',
                // 密码
                'password'        => 'yDUTtnzSXqGG0sM3',
                // 端口
                'hostport'        => '3308',
                ]);
                $data = $db->table("book_info")->select();
                dump($data);
            }
        2.使用字符串
            Db::connect("数据库类型://用户名:密码@数据库地址:数据库端口/数据库名字#字符集");
        3.如何使用
            public function stringSql(){
                $db = Db::connect("mysql://root:yDUTtnzSXqGG0sM3@127.0.0.1:3308/user#utf8");
                $data = $db->table("book_info")->select();
                dump($data);
            }
    c.模型类定义
        1.创建数据模型
            a.命令行创建
                1.切换到项目目录
                2.执行命令
                    php think make:model app\index\model\User
            b.手动创建
                1.打开数据模型目录
                    application\index\model
                2.在目录下新建User.php文件
                3.在文件中书写代码
                    <?php
                    namespace app\index\model;

                    use think\Model;

                    class User extends Modle{
                        // 
                    }
        2.如何设置
            a.使用数组配置连接
                <?php
                    namespace app\index\model;

                    use think\Model;

                    class User extends Model{
                        // 使用数组配置连接
                        protected $connction = [
                            // 数据库类型
                            'type'            => 'mysql',
                            // 服务器地址
                            'hostname'        => '127.0.0.1',
                            // 数据库名
                            'database'        => 'user',
                            // 用户名
                            'username'        => 'root',
                            // 密码
                            'password'        => 'yDUTtnzSXqGG0sM3',
                            // 端口
                            'hostport'        => '3308',
                        ];
                    }
            b.使用字符串配置连接
                protected $connctin = "mysql://root:yDUTtnzSXqGG0sM3@127.0.0.1:3308/user#utf8";
        3.如何在控制器中使用
            public function modelSql(){
                $user = new \app\index\model\User();
                dump($user::all());
            }

******************第十七节*数据库的传统操作方式(1/2)*******************************
1.数据库的基本使用
    a.增加(返回受影响行数)
        public function insert(){
            
            $data = Db::execute("insert into user_info value(3,'syh','女','河南职业')");
            $data = Db::execute("insert into user_info value(4,?,?,?)",["ccw","女","职业"]);
            $data = Db::execute("insert into user_info value(5,:name,:sex,:address)",['name'=>'gsyyy','sex'=>'男','address'=>'职业学院']);
            dump($data);
        }
    b.修改(返回受影响行数)
        public function update(){
            $data = Db::execute("update user_info set name = 'lpz' where id = 15");
            $data = Db::execute("update user_info set name = 'lpz' where id = ?",[15]);
            $data = Db::execute("update user_info set name = 'lpz' where id = :id",['id'=>15]);
            dump($data);
        }
    c.删除(返回受影响行数)
        public function delete(){
            $data = Db::execute("delete from user_info where id < 6");
            $data = Db::execute("delete from user_info where id > ?",[5]);
            $data = Db::execute("delete from user_info where id <= :id",['id'=>10]);
            dump($data);
        }
    d.查看
        public function select(){
            // 使用系统类
            // $data = Db::query("select * from user_info");
            $data = Db::query("select * from user_info where id >= ? and id <= ?",[0,5]);
            dump($data);
            // 获取最后执行的sql语句
            echo Db::getLastSql();
        }
    e.获取最后执行的sql语句
        Db::getLastSql();
    f.实现用户模块
        1.在命令行找到项目目录，新建资源控制器
            php think make:controller app\index\controller\Users
        2.写资源路由
            详见users控制器
            // 资源路由
            Route::resource('user','index/users');

*****************************************第十九节*数据库查询操作(1)*************************************
1.查询操作
    a.table方法
        1.查询所有数据
            $data = Db::table("user_info")->select();
        2. 查询一条数据
            $data = Db::table("user_info")->find();
    b.name方法查询数据
        1.name方法会自动添加数据库配置中的表前缀
        2. 查询所有数据
            $data = Db::name("info")->select();
        3.查询一条数据
            $data = Db::name("info")->find();
    c.助手函数db
        1.助手函数db会自动添加数据库配置中的表前缀
            $data = db('info')->select();
            $data = db('info')->find();
    d.where条件匹配
        1.查询id大于5和id小于12的数据
            $data = Db::table('user_info')->where("id",">",5)->where("id","<",12)->select();
        2.查询name包含字符s的数据
            $data = Db::table('user_info')->where("name","like","%s%")->select();
        3.查询名字等于龚烁宇和性别等于男和id等于10的数据
            $data = Db::table("user_info")->where("name","龚烁宇")->where("sex","男")->where("id","10")->select();
    e.whereOr(或)匹配
        1.查询id大于等于5或id小于等于11的数据
            $data = Db::table("user_info")->where("id",">=",5)->whereOr("id","<=",11)->select(
        2.查询name包含gsy或name包含syh的数据
            $data = Db::table("user_info")->where("name","like","%gsy%")->whereOr("name","like","syh")->select();
    f.limit截取数据
        1.获取整个表前两条数据
            $data = Db::name('info')->limit(2)->select();
        2.获取从2条数据之后的两条数据
            $data = Db::name('info')->limit(2,2)->select();
    g.order排序
        1.获取到的数据倒序
            $data = Db::name('info')->order("id","desc")->select();
    h.field设置查询字段
        1.查询user_info表内name，sex字段
            $data = Db::name('info')->field("name,sex")->select();
        2.使用sql自带函数获取表内共有多少条数据
            $data = Db::name('info')->field("count(*) as tot")->select();
        3.使用数组键值对查询字段name命名为uname,sex字段
            $data = Db::name('info')->field(['name'=>'uname','sex'])->select();
        4.使用数组进行sql系统函数获取表内共有多少数据，并起别名为tot
            $data = Db::name('info')->field(['count(*)' => 'tot'])->select();
        5.查询除去name,sex字段之外所有字段的所有数据
            $data = Db::name('info')->field("name,sex",true)->select();
            $data = Db::name('info')->field(['name','sex'],true)->select();
    i.page实现分页效果
        1.page("2,5") = 每页展示5条数据并展示第二页
            $data = Db::name('info')->page("1,5")->select();
    j.group分组聚合
        1.根据name分组并计算每组共有多少条数据
            $data = Db::name('info')->field("name,count(*) tot")->group("name")->select();
    l.having过滤
        1.根据name分组并计算每组共有多少条数据之后并展示每组大于4条数据的组
            $data = Db::name('info')->field("name,count(*) tot")->group("name")->having("tot >= 4 ")->select();
        2.注意：having只能结合group分组使用
    
*****************************************第二十节*数据库查询操作(2)*************************************
1.多表查询
    a.查询商品信息表所有数据和商品名表中的name字段并起别名为cname,条件为商品信息表的cid字段等于商品名表中的id字段
        $data = Db::query("select commodity_info.*,commodity_name.name cname from commodity_name,commodity_info where commodity_info.cid = commodity_name.id");
    b. 使用右连接方式查询商品信息表所有数据和商品名表中的name字段并起别名为cname,条件为商品信息表的cid字段等于商品名表中的id字段
        $data = Db::name("commodity_info")->field("commodity_info.*,commodity_name.name cname")->join("commodity_name","commodity_info.cid = commodity_name.id",'right')->select();
    c.给表起别名 alias方法 查询商品信息表所有数据和商品名表中的name字段并起别名为cname,条件为商品信息表的cid字段等于商品名表中的id字段
        $data = Db::name("commodity_info")->alias("i")->field("i.*,n.name cname")->join("commodity_name n","i.cid = n.id",'right')->select();
    d.合并多个select语句的结果集 union方法
        1.注意： 
            a.必须由两条或者两条以上的select语句组成，语句之间用关键字union分隔
            b.每个查询中必须包含相同的列，表达式或聚集函数(顺序可以不同)
            c.列数据类型必须兼容，类型不必完全相同，但必须是DBMS可以隐含地转换的类型。
        2.
            $data = Db::field("name")->table("commodity_name")->union("select name from commodity_info")->select();
        

