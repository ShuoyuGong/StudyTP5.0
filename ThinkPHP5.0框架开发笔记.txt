******************第一节*TP5.0安装******************
1.TP5.0框架
    1.1 TP5.0框架开发
    2.1 TP5.0核心技术
    3.1 TP5.0 项目开发
2.PHP框架
    (1)TP3.2
    (2)laravel
    (3)Yii框架
    (4)TP5.0框架
3.TP 5.0
    开源、快速、简单的面向对象的轻量级PHP开发框架
4.检测TP 5.0的环境
    (1).PHP >= 5.4.0
    (2).PDO PHP Extension
    (3).MBstring PHP Extension
    (4).CURL PHP Extension
5.安装
    (1).源代码包安装
        a.去thinkphp官网下载TP5.0核心文件
        b.解压压缩包
        c.将解压文件拷贝到WWW目录
        d.通过PHP study访问 TP文件 public文件夹
    (2).composer安装
        a.composer安装官网(www.phpcomposer.com)
            是用来管理PHP依赖关系的工具
        b.下载composer
        c.安装composer 安装至PHP工具中
        d.检测composer安装是否安装成功
            (1).进入命令行
            (2).输入composer
        e.安装TP5
            (1).切换至PHP study根目录(WWW)
            (2).切换国内镜像(国外镜像安装速度慢)
                composer config -g repo.packagist composer http://packagist.phpcomposer.com
            (3).安装TP 5.0
                composer create-project topthink/think [文件夹名称->]tp5  --prefer-dist
            (4).检测TP 5.0安装是否安装成功
                a.通过PHP study访问 TP文件 public文件夹
    (3).git安装TP 5.0
        a.CMD切换至PHP study根目录(WWW)
        b.输入 git clone https://github.com/top-think/think [文件夹名称->]tp5
        c.切换至 TP5.0 目录下
        d.拷贝核心框架代码
            git clone https://github.com/top-think/framework thinkphp
        e.检测TP 5.0安装是否安装成功
            (1).通过PHP study访问 TP文件 public文件夹



******************第二节*目录结构和MVC模式******************
1.目录结构
    |-appliccation  应用目录，是整个网站的核心
    |---|---index 前台目录
    |---|---|---controller 控制器
    |---|---|---model 数据模型
    |---|---|---view 页面
    |---|---admin 后台目录
    |-extend 扩展类库目录
    |-public 静态资源和入口文件
    |---|---static 用于存放静态资源 css、js、img
    |---|---index.php 入口文件
    |-runtime 网站运行临时目录
    |-tests 测试目录
    |-thinkphp TP框架的核心文件
    |---|---lang 语言包
    |---|---library TP框架的核心文件
    |---|---tpl 模版页面
    |-vendor 第三方扩展目录
2.URL地址了解
    http://www.tp.com/index.php/index/index/index
    http://www.tp.com/   index.php  /index   /index  /index
            域名           入口文件   前台     控制器   方法
3.了解TP开发模式
    (1).链接数据库(F:\PHPstudy\PHPTutorial\WWW\TP5\application\database.php)
        // 数据库类型
        'type'            => 'mysql',
        // 服务器地址
        'hostname'        => '127.0.0.1',
        // 数据库名
        'database'        => '',
        // 用户名
        'username'        => 'root',
        // 密码
    (2).开启调试模式(F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application\config.php)
        app_debug   -> ture;显示报错信息
    (3).控制器中书写代码(F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application\index\controller\index.php)
        <?php
            namespace app\index\controller;
            // 引入系统数据类
            use think\Db;
            // 引入系统控制器类
            use think\Controller;
            class Index extends Controller
            {
                public function index()
                {
                    // return '<style type="text/css">*{ padding: 0; margin: 0; } .think_default_text{ padding: 4px 48px;} a{color:#2E5CD5;cursor: pointer;text-decoration: none} a:hover{text-decoration:underline; } body{ background: #fff; font-family: "Century Gothic","Microsoft yahei"; color: #333;font-size:18px} h1{ font-size: 100px; font-weight: normal; margin-bottom: 12px; } p{ line-height: 1.6em; font-size: 42px }</style><div style="padding: 24px 48px;"> <h1>:)</h1><p> ThinkPHP V5<br/><span style="font-size:30px">十年磨一剑 - 为API开发设计的高性能框架</span></p><span style="font-size:22px;">[ V5.0 版本由 <a href="http://www.qiniu.com" target="qiniu">七牛云</a> 独家赞助发布 ]</span></div><script type="text/javascript" src="https://tajs.qq.com/stats?sId=9347272" charset="UTF-8"></script><script type="text/javascript" src="https://e.topthink.com/Public/static/client.js"></script><think id="ad_bd568ce7058a1091"></think>';
                    // 从数据库中读取数据
                    $data = Db::table('coding_region')->select();
                    // 分配数据给页面
                    $this->assign('data',$data);
                    return view();
                }
            }
    (4).页面中(F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application\index\view\index\index.html)

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="X-UA-Compatible" content="ie=edge">
            <title>Document</title>
        </head>
        <body>
            <table border="1" width="800px" align="center">
                <tr>
                    <th>ID</th>
                    <th>parentid</th>
                    <th>name</th>
                    <th>parentpath</th>
                    <th>firstletter</th>
                    <th>type</th>
                    <th>create</th>
                </tr>

                {volist name="data" id="value"}
                    <tr>
                        <td>{$value.id}</td>
                        <td>{$value.parentid}</td>
                        <td>{$value.name}</td>
                        <td>{$value.parentpath}</td>
                        <td>{$value.firstletter}</td>
                        <td>{$value.type}</td>
                        <td>{$value.created}</td>
                    </tr>
                {/volist}
            </table>
        </body>
        </html>
4.MVC模式
    M model 模型
    V view  试图
    C controller 控制器
5.MVC在TP中如何体现？
    (1).M (F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application\index\model)
        执行数据库相关处理
    (2).V (F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application\index\view)
        展示页面
    (3).C (F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application\index\controller)
        主要负责整个逻辑运转，核心
6.MVC的变形模式
    (1).MV模式(模型和控制器)
        主要作用：用于接口开发(只需要返回JSON或XML数据，不需要页面展示，舍弃C层)
    (2).VC(试图和控制器)
        主要作用：单页面得网站(不需要从数据库中获取数据，舍弃M层)

******************第三节*架构详解和跨控制器调用******************
1.TP架构的概述
    TP使用了MVC模式，它强制的是应用程序的输入、处理和输出分开。使用MVC应用编程被分为
    三个核心部件：模型(M)、视图(V)、控制器(C)，它们各自处理自己的任务
2.URL解析
    http://www.tp.com/   index.php  /index   /index  /index
            域名           入口文件   前台     控制器   方法
3.入口文件
    (1).文件地址:(F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\public\index.php)
    (2).作用：负责处理整个TP的请求
4.应用
    (1).应用地址(F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application)
    (2).作用：一个应用代表一个网站
5.模块(以前台为例)
    (1).模块地址(F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application\index)
    (2).作用：网站前台所有的相关内容都与其有关
    (3).新建后台模块
        a.在应用目录新建admin目录
        b.在admin目录下新建model、view、controller
        c.在控制器中新建Index控制器
6.控制器
    (1).控制器目录(F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\application\index\controller)
    (2).作用：书写业务逻辑
    (3).新建控制器
        a.在前台控制器目录新建user.php
        b.在控制器中书写代码
        c.地址栏访问
        d.注意：
            1.控制器的文件名必须首字母大写
            2.控制器中必须声明命名空间
            3.控制器中类名必须和文件名一致
7.操作(方法)
    1.操作地址
        操作一般都在控制器的文件中
    2.新建一个操作(以前台Index控制器为例)
        a.打开前台index控制器
        b.在控制器中新建test方法
        c.通过地址栏访问
8.模型(数据模型)
    1.作用
        负责数据库相关的处理
9.视图(页面)
    1.其实就是网站的页面
10.命名空间
    1.与目录有关(以前台index为例)
        namespace app\index\controller
11.跨控制器调用
    public function diaoyong()
    {
        echo "调用前台user控制器 第一种方式 使用命名空间";
        echo "<br>";
        $model = new \app\index\controller\User;
        echo $model->index();
        echo "<hr>";

        echo "调用前台user控制器 第二种方式 use方法";
        echo "<br>";
        $model = new User();
        echo $model->index();
        echo "<hr>";

        echo "调用前台user控制器 第三种方式 使用系统方法";
        echo "<br>";
        $model = controller('User');
        echo $model->index();
        echo "<hr>";



        echo "调用后台admin index控制器 第一种方式 使用命名空间";
        echo "<br>";
        $model = new \app\admin\controller\Index;
        echo $model->index();
        echo "<hr>";

        echo "调用后台admin index控制器 第二种方式 use方法";
        // use app\admin\controller\index as adminIndex;
        echo "<br>";
        $model = new adminIndex;
        echo $model->index();
        echo "<hr>";

        echo "调用后台admin index控制器 第三种方式 使用系统方法";
        //系统方法一般在(F:\PHPstudy\PHPTutorial\WWW\StudyTP5.0\thinkphp\helper.php)
        echo "<br>";
        $model = controller('admin/Index');
        echo $model->index();
        echo "<hr>";
    }

******************第四节*方法调用和框架加载流程*************
1.调用方法
    a.调用当前控制器的test方法
        public function fangfa(){
            // 调用当前控制器中的test方法
            // $this代表当前控制器
            echo "使用this方法<br>";
            echo $this->test();
            echo "<hr>";
            // self代表当前控制器
            echo "使用self方法"."<br>";
            echo self::test();

            echo "<hr>";
            // 直接使用当前控制器名字找到方法名
            echo "使用Index控制器"."<br>";
            echo Index::test();

            echo "<hr>";
            // 直接使用当前控制器名字找到方法名
            echo "使用系统方法 action"."<br>";
            echo action('test');
        }
    b.调用其他控制器中的方法(User控制器下的index方法)
        public function othersfangfa()
        {
            // 传统方法
            echo "传统方法";
            echo "<br>";
            $model = new \app\index\controller\User;
            echo $model->index();
            echo "<hr>";
            // 系统方法
            echo "系统方法";
            echo "<br>";
            echo action('User/index');
            echo "<hr>";
        }
    c.调用后台模块下的Index方法
        public function houtaimokuai()
        {
            // 传统方法
            echo "传统方法";
            echo "<br>";
            $model = new \app\admin\controller\Index;
            echo $model->index();
            echo "<hr>";
            // 系统方法
            echo "系统方法";
            echo "<br>";
            echo action('admin/Index/index');

        }
2.主要分析TP的执行流程
    a.入口文件(public\index.php)
        作用: 1.定义目录常量
              2.加载框架的引导目录
    b.加载框架的引导目录(thinkphp\start.php)
        作用：1.引导基础文件base.php
              2.对应用进行运转
    c.引导加载框架基础文件base.php(thinkphp\base.php)
        作用： 1.加载了系统常量
               2.引入loader类(library\think\loader.php)
               3.引入环境变量
               4.注册自动加载机制
               5.注册异常处理机制(library\think\error.php)
               6.加载惯例配置文件(thinkphp\convention.php)
    d.运行应用(library\think\App.php)下的run方法
        第一步：加载当前控制器中的initCommon方法
        第二步：加载当前控制器中init()方法调用和框架加载流程
            1.加载各种配置文件
            2.加载公共文件
            3.加载语言包
        第三步：设置时区
        第四步：加载当前控制器routeCheck()方法，进行路由检测
        第五步：调用控制器中exec()方法调用和框架加载流程
            根据用户请求进行分发处理
        第六步：根据不同的请求类型记载对应的文件(module()方法)
            加载到对应的控制器和方法名
    e.响应输出
        用户看到的所有界面就加载完毕

******************第五节*配置相关(上\下)***********************
1.配置文件的格式(以数组为主)
    a.TP支持多种配置格式的配置格式，但最终都是解析为PHP数组的方式
    b.我们主要的学习形式就是数组
    c.  return[
            default_module => 'index',
            default_controller => 'Index',
            default_action => 'index',
        ];
2.配置文件的形式
    a.惯例配置(路径：thinkphp\convention.php)
        1.注意：一般不要修改惯例配置
        2.读取配置文件内容
            a.直接通过键获取值
                1.通过系统类
                    echo \think\Config::get('name');
                2.通过系统方法
                    // 输出配置文件  config()方法 用于读取系统方法
                    echo config('name');
                    echo "<hr>";
                    echo config('age');
                    echo "<hr>";
                    echo config('address');
                    echo "<hr>";
                3.使用use将Config引入
                    use  \think\Config;
                    // 通过系统类进行配置
                    // 如果配置项存在直接输出，不存在返回NULL
                    echo Config::get('name');
                    echo "<hr>";
                    echo Config::get('age');
                    echo "<hr>";
                    echo Config::get('address');
                    echo "<hr>";
            b.获取整个键值对数组
                1.通过系统类
                    a.直接打印配置信息
                        echo \think\Config::get('teacher');
                        echo \think\Config::get('teacher.name');
                    b.打印数组配置信息
                        dump \think\Config::get('teacher');
                        dump \think\Config::get('teacher.name');
                2.通过系统方法
                    a.直接打印配置信息
                        // 输出配置文件  config()方法 用于读取系统方法
                        echo config('teacher');
                        echo "<hr>";
                        echo config('teacher.name');
                        echo "<hr>";
                        echo config('teacher.age');
                        echo "<hr>";
                        echo config('teacher.address');
                    b.打印数组配置信息
                        // 输出配置文件  config()方法 用于读取系统方法
                        dump config('teacher');
                        echo "<hr>";
                        dump config('teacher.name');
                        echo "<hr>";
                        dump config('teacher.age');
                        echo "<hr>";
                        dump config('teacher.address');
                3.使用use将Config引入
                    a.直接打印配置信息
                        use  \think\Config;
                        // 通过系统类进行配置
                        // 如果配置项存在直接输出，不存在返回NULL
                        echo Config::get('name');
                        echo "<hr>";
                        echo Config::get('age');
                        echo "<hr>";
                        echo Config::get('address');
                        echo "<hr>";
                    b.打印数组配置信息
                        use  \think\Config;
                        // 通过系统类进行配置
                        // 如果配置项存在直接输出，不存在返回NULL
                        dump Config::get('name');
                        echo "<hr>";
                        dump Config::get('age');
                        echo "<hr>";
                        dump Config::get('address');
                        echo "<hr>";
    b.应用配置(路径：application\config.php)
    c.扩展配置
        1.其实就是对配置文件进行分目录的管理
        2.默认有两个扩展配置
            a.  database.php(application\database.php)
            b.  (application\extra\用户可以自定义配置文件)
            c.  
                EX:dump(config('扩展文件名.键'))
                读取database扩展配置
                读取database所有配置项
                dump(config('database'))
                读取database单个配置项
                dump(config('database.hostname'))
            d.自定义扩展配置
                1.在扩展目录下(application\extra)下新建user.php
                2.打开文件书写相关配置
                    <?php
                    return [
                        'name' => '张三',
                        'love' => '作家',
                    ]
                3.读取自定义扩展配置
    d.场景配置
        1.解决问题
            开发过程中可能在不同的环境下进行开发，例如在公司和在家里使用两个数据库一样
            则需要两个配置文件->home.php/->office.php
        2.如何使用
            a.修改应用配置(application\config.php)
            'app_status' => 'home';
            b.在应用目录下新建对应的文件名(home.php)
            c.在home.php中书写相关配置
    e.模块配置
        1.解决问题
            每一个模块都有自己特有的配置，前台模块有前台模块的配置，后台模块有后台模块的配置
        2.如何使用(以前台模块为例)
            a.在前台模块下(application\index\)新建config.php
            b.打开配置文件书写
    f.动态配置
        1.如何配置
            a.系统方法
                echo '通过系统方法进行配置';
                echo "<br>";
                dump(config('name','PHP开发'));
                echo "<br>";
            b.系统类
                echo '通过系统类进行配置';
                echo "<br>";
                dump(\think\Config::set('name','WEB前端'));
                echo "<br>";
                use think\Config;
                dump(Config::set('name','WEB前端'));
3.系统类(属于TP框架的核心类库)
    a.目录 -> \thinkphp\library\think
    b.Config设置和获取配置文件信息
4.系统方法(属于TP框架的方法库)
    a.目录 -> thinkphp\helper.php
    b.  Controller  实例化控制器
        action      调用模块的操作方法
        config      设置和获取配置
        dump        浏览器友好的数组/变量输出
5.配置文件之间的加载顺序
    a.优先级
        动态配置->模块配置->场景配置->应用配置->应用配置->惯例配置
    b.加载顺序
        惯例配置->应用配置->应用配置->场景配置->模块配置->动态配置
    c.配置文件实现原理
        后面加载的配置，把前面加载的同名配置名覆盖，所以最后加载的配置项优先级最高
6.环境变量配置
    a.TP 5.0支持环境变量的配置
    b.如何设置环境变量配置
        1.打开网站根目录(\StudyTP5.0\)下新建文件名为(.env)的文件
        2.书写环境配置
            a.书写时不能使用中文
        3.读取环境配置
            a.命名空间全路径
                dump(\think\Env::get('name'));
                dump(\think\Env::get('name','不存在'));
            b.使用use引入Env.php文件,导入系统类
                // use  \think\Env;
                dump(env::get('name'));
            c.注意：只能读取数组单个元素，不能读取整个数组
        4.如何使用
            a.在Env.php文件中写入配置文件中想要修改的键值对
                例如：'app_debug' => 'ture'
            b.打开配置文件，引入Use think\Env
            c.随后使用系统类赋值键值对
                例如：'app_debug' => Env::get('app_debug',false),

******************第七节*入口文件和配置模式*********************
1.路由作用
    a.简化url地址，方便大家记忆
    b.有利于搜索引擎的优化
2.入口文件
    a.前后台分离
        1.在网站public目录下新建一个admin.php后台入口文件
        2.打开admin.php书写代码
    b.绑定模块
        1.实现功能
            index.php入口文件只能去前台模块页面
            admin.php入口文件只能去后台模块页面
        2.如何实现
            a.在前台入口文件中写入，绑定前台模块
                define('BIND_MODULE','index');
            a.在后台入口文件中写入，绑定后台模块
                define('BIND_MODULE','admin');
        3.URL地址发生改变
            a.入口绑定之前url地址
                www.tp.com/入口文件/模块名/控制器/方法名
                www.tp.com/Admin.php/Admin/index/index
            b.入口绑定之后url地址
                www.tp.com/入口文件/控制器/方法名
                www.tp.com/Admin.php/index/index
        4.隐藏入口文件
            a.开启apace的重写(F:\PHPstudy\PHPTutorial\Apache\conf\httpd.conf)
                把注释开启->LoadModule rewrite_module modules/mod_rewrite.so
            b.设置访问权限
            c.入口文件，在网站public目录下
                1.新建文件.htaccess文件
                2.写入
                    <IfModule mod_rewrite.c>
                        Options +FollowSymlinks -Multiviews
                        RewriteEngine On

                        RewriteCond %{REQUEST_FILENAME} !-d
                        RewriteCond %{REQUEST_FILENAME} !-f
                        RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]
                    </IfModule>
            d.重启服务
            f.url地址变化，已不需要写入口文件
        5.TP5.0路由学习
            a.支持3种方式的URL解析规则
                1.普通模式
                    a.定义：关闭路由，完全使用默认的PATH_INFO方式URL
                    b.形式：http://www.tp.com:81/index.php/index/index/diaoyong
                    c.如何配置
                        // 是否开启路由
                        'url_route_on'           => true,
                        // 是否强制使用路由
                        'url_route_must'         => false,
                2.混合模式
                    a.定义：开启路由，并使用路由定义+默认的PATH_INFO方式混合
                    b.如何配置
                        // 是否开启路由
                        'url_route_on'           => true,
                        // 是否强制使用路由
                        'url_route_must'         => false,
                3.强制模式
                    a.定义：开启路由，并设置必须定义路由才能访问
                    b.如何配置
                        // 是否开启路由
                        'url_route_on'           => true,
                        // 是否强制使用路由
                        'url_route_must'         => true,
            b.路由只针对应用，不针对模块，因此路由的设置也是针对应用下面的所有模块
            c.关闭后台路由
                在后台写入以下代码，必须写在 加载框架引导文件  之后
                // 关闭admin模块的路由
                \think\App::route(false);
        6.设置路由-动态单个注册
            a.设置路由请求类型
                1.get  支持get请求(两种方式)
                    Route::rule('type','index/index/type','get');
                    Route::get('type','index/index/type');
                2.post 支持post请求(两种方式)
                    Route::rule('type','index/index/type','post');
                    Route::post('type','index/index/type');
                3.同时支持get和post方式
                    Route::rule('type','index/index/type','get|post');
                4.支持所有请求方式
                    Route::rule('type','index/index/type','*');
                    Route::any('type','index/index/type','*');
                4.put
                    Route::rule('type','index/index/type','put');
                    Route::put('type','Index/index/type');
                5.delete
                    Route::rule('type','index/index/type','delete');
                    Route::delete('type','Index/index/type');
                6.Route::rule()默认支持所有请求方式
            b.设置路由的文件
            c.如何设置
                //1.静态地址路由
                // // 引入系统类
                // //设置路由之后，就不能用pathinfo访问
                // use think\Route;
                // Route::rule('/','index/index/index');
                // Route::rule('test','index.php/index/index/test');
            d.路由的形式
                1.静态地址路由
                    // Route::rule('test','index.php/index/index/test');
                2.注册带参数路由
                    // Route::rule('test/:id','index.php/index/index/test');
                    如果路由设置两个参数，必须设置两个参数的路由
                    // Route::rule('test/:id/:name','index.php/index/index/test');
                3.可选参数的路由
                    // Route::rule('test/:id/[:name]','index.php/index/index/test');
                4.全动态路由
                    // Route::rule(':id/[:name]','index.php/index/index/test');
                5.完全匹配路由
                    // Route::rule('test$/::id/[:name]','index.php/index/index/test');
                    如果写成http://www.tp.com:81/test1  可以成功访问
                    如果写成http://www.tp.com:81/test1/waf/gds,如果test1后面写一些东西，则不能访问
                6.路由额外带参数
                    // Route::rule('test','index/index/test?id=10&name=gsy');
                    // Route::rule('test$/::id/[:name]','index.php/index/index/test?id=10&name=gsy');
        7.设置路由-动态批量注册
            a.基本格式
                Route::rule([
                '路由规则1'=>'路由地址和参数',
                '路由规则2'=>['路由地址和参数','匹配参数（数组）','变量规则（数组）']
                ...
                ],'','请求类型','匹配参数（数组）','变量规则');
            b.使用方式
                1.所有请求类型
                    Route::rule([
                                "test" => "index/index/test",
                                "course/:id" => "index/index/course",
                            ]);
                2.get请求类型
                    Route::get([
                                "test" => "index/index/test",
                                "course/:id" => "index/index/course",
                            ]);
                3.post请求类型
                    Route::post([
                                "test" => "index/index/test",
                                "course/:id" => "index/index/course",
                            ]); 
            c.使用配置文件进行批量注册
                return [
                        "test" => "index/index/test",
                        "course/:id" => "index/index/course",
                    ];
        8.设置路由-





            


    

